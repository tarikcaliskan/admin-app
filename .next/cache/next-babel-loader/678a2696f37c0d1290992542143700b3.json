{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/tarik/Desktop/admin-app/components/YourLineGraph.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Chart from 'chart.js';\nimport classes from './LineGraph.module.css';\nvar myLineChart; //--Chart Style Options--//\n\nChart.defaults.global.defaultFontFamily = \"'Poppins', sans-serif\";\nChart.defaults.global.legend.display = false; //--Chart Style Options--//\n\nvar LineGraph = /*#__PURE__*/function (_Component) {\n  _inherits(LineGraph, _Component);\n\n  var _super = _createSuper(LineGraph);\n\n  function LineGraph() {\n    var _this;\n\n    _classCallCheck(this, LineGraph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"chartRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"buildChart\", function () {\n      var myChartRef = _this.chartRef.current.getContext('2d');\n\n      var _this$props = _this.props,\n          data = _this$props.data,\n          average = _this$props.average,\n          labels = _this$props.labels;\n      if (typeof myLineChart !== 'undefined') myLineChart.destroy();\n      myLineChart = new Chart(myChartRef, {\n        type: 'line',\n        data: {\n          //Bring in data\n          labels: labels,\n          datasets: [{\n            label: 'Sales',\n            data: data,\n            fill: false,\n            borderColor: '#6610f2'\n          }, {\n            label: 'National Average',\n            data: average,\n            fill: false,\n            borderColor: '#E0E0E0'\n          }]\n        },\n        options: {//Customize chart options\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(LineGraph, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.buildChart();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.buildChart();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: classes.graphContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 4\n        }\n      }, __jsx(\"canvas\", {\n        id: \"myChart\",\n        ref: this.chartRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 5\n        }\n      }));\n    }\n  }]);\n\n  return LineGraph;\n}(Component);\n\nexport { LineGraph as default };","map":{"version":3,"sources":["/Users/tarik/Desktop/admin-app/components/YourLineGraph.js"],"names":["React","Component","Chart","classes","myLineChart","defaults","global","defaultFontFamily","legend","display","LineGraph","createRef","myChartRef","chartRef","current","getContext","props","data","average","labels","destroy","type","datasets","label","fill","borderColor","options","buildChart","graphContainer"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,IAAIC,WAAJ,C,CAEA;;AACAF,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAsBC,iBAAtB,GAA0C,uBAA1C;AACAL,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAsBE,MAAtB,CAA6BC,OAA7B,GAAuC,KAAvC,C,CACA;;IAEqBC,S;;;;;;;;;;;;;;;;+DACTV,KAAK,CAACW,SAAN,E;;iEAUE,YAAM;AAClB,UAAMC,UAAU,GAAG,MAAKC,QAAL,CAAcC,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;;AADkB,wBAEgB,MAAKC,KAFrB;AAAA,UAEVC,IAFU,eAEVA,IAFU;AAAA,UAEJC,OAFI,eAEJA,OAFI;AAAA,UAEKC,MAFL,eAEKA,MAFL;AAIlB,UAAI,OAAOf,WAAP,KAAuB,WAA3B,EAAwCA,WAAW,CAACgB,OAAZ;AAExChB,MAAAA,WAAW,GAAG,IAAIF,KAAJ,CAAUU,UAAV,EAAsB;AACnCS,QAAAA,IAAI,EAAE,MAD6B;AAEnCJ,QAAAA,IAAI,EAAE;AACL;AACAE,UAAAA,MAAM,EAAEA,MAFH;AAGLG,UAAAA,QAAQ,EAAE,CACT;AACCC,YAAAA,KAAK,EAAE,OADR;AAECN,YAAAA,IAAI,EAAEA,IAFP;AAGCO,YAAAA,IAAI,EAAE,KAHP;AAICC,YAAAA,WAAW,EAAE;AAJd,WADS,EAOT;AACCF,YAAAA,KAAK,EAAE,kBADR;AAECN,YAAAA,IAAI,EAAEC,OAFP;AAGCM,YAAAA,IAAI,EAAE,KAHP;AAICC,YAAAA,WAAW,EAAE;AAJd,WAPS;AAHL,SAF6B;AAoBnCC,QAAAA,OAAO,EAAE,CACR;AADQ;AApB0B,OAAtB,CAAd;AAwBA,K;;;;;;;wCAtCmB;AACnB,WAAKC,UAAL;AACA;;;yCAEoB;AACpB,WAAKA,UAAL;AACA;;;6BAkCQ;AACR,aACC;AAAK,QAAA,SAAS,EAAExB,OAAO,CAACyB,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAQ,QAAA,EAAE,EAAC,SAAX;AAAqB,QAAA,GAAG,EAAE,KAAKf,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADD;AAKA;;;;EAjDqCZ,S;;SAAlBS,S","sourcesContent":["import React, { Component } from 'react';\nimport Chart from 'chart.js';\nimport classes from './LineGraph.module.css';\nlet myLineChart;\n\n//--Chart Style Options--//\nChart.defaults.global.defaultFontFamily = \"'Poppins', sans-serif\";\nChart.defaults.global.legend.display = false;\n//--Chart Style Options--//\n\nexport default class LineGraph extends Component {\n\tchartRef = React.createRef();\n\n\tcomponentDidMount() {\n\t\tthis.buildChart();\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.buildChart();\n\t}\n\n\tbuildChart = () => {\n\t\tconst myChartRef = this.chartRef.current.getContext('2d');\n\t\tconst { data, average, labels } = this.props;\n\n\t\tif (typeof myLineChart !== 'undefined') myLineChart.destroy();\n\n\t\tmyLineChart = new Chart(myChartRef, {\n\t\t\ttype: 'line',\n\t\t\tdata: {\n\t\t\t\t//Bring in data\n\t\t\t\tlabels: labels,\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Sales',\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\tborderColor: '#6610f2',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'National Average',\n\t\t\t\t\t\tdata: average,\n\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\tborderColor: '#E0E0E0',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\t//Customize chart options\n\t\t\t},\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={classes.graphContainer}>\n\t\t\t\t<canvas id=\"myChart\" ref={this.chartRef} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}